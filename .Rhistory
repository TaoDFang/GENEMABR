if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TSCAN", version = "3.8")
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite("TSCAN")
library(TSCAN)
help("preprocess")
procdata <- preprocess(human_tpm)
View(procdata)
lpsmclust <- exprmclust(procdata)
plotmclust(lpsmclust)
human_groups
lpsorder <- TSCANorder(lpsmclust)
lpsorder
View(human_groups)
diffval <- difftest(procdata,lpsorder)
head(row.names(diffval)[diffval$qval < 0.05])
help("exprmclust")
help("plotmclust")
lpsorder
View(human_groups)
plotmclust(lpsmclust)
procdata <- preprocess(human_tpm)
lpsmclust <- exprmclust(procdata,clusternum = 3)
plotmclust(lpsmclust)
lpsm_dim=lpsmclust$clusterid
lpsm_dim=
lpsmclust$clusterid
lpsmclust$clusterid
order(lpsmclust$clusterid)
names(lpsmclust$clusterid)
names(lpsmclust$clusterid)[lpsmclust$clusterid==1]
names(lpsmclust$clusterid)[lpsmclust$clusterid==3]
names(lpsmclust$clusterid)[lpsmclust$clusterid==2]
names(lpsmclust$clusterid)[lpsmclust$clusterid==3]
order(names(lpsmclust$clusterid)[lpsmclust$clusterid==3])
names(lpsmclust$clusterid)[lpsmclust$clusterid==3]
overlap(names(lpsmclust$clusterid)[lpsmclust$clusterid==1],human_meta[human_meta$General.groups==1,"SeqID"])
overlap(names(lpsmclust$clusterid)[lpsmclust$clusterid==1],human_meta[human_meta[,"General.groups"]==1,"SeqID"])
human_meta[,"General.groups"]==1
human_meta[human_meta[,"General.groups"]==1,"SeqID"])
human_meta[human_meta[,"General.groups"]==1,"SeqID"]
names(lpsmclust$clusterid)[lpsmclust$clusterid==1]
View(human_meta)
intersect(names(lpsmclust$clusterid)[lpsmclust$clusterid==1],rownames(human_meta)[human_meta[,"General.groups"]==1])
intersect(names(lpsmclust$clusterid)[lpsmclust$clusterid==2],rownames(human_meta)[human_meta[,"General.groups"]==2])
intersect(names(lpsmclust$clusterid)[lpsmclust$clusterid==3],rownames(human_meta)[human_meta[,"General.groups"]==3])
rm(list = ls())
rm(list = ls())
R.version
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version="devel")
BiocManager::valid()
BiocManager::version()
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(version="devel")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version="devel")
BiocManager::valid()
BiocManager::version()
BiocManager::install(version="devel")
BiocManager::valid()
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
BiocManager::valid()              # checks for out of date packages
R.version
BiocManager::install("GENEMABR")
BiocManager::install("GENEMABR")
help(rm(list = ls*()))
help(rm(list = ls()))
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(devtools)
library(roxygen2)
knitr::opts_chunk$set(echo = TRUE)
library(roxygen2)
library(devtools)
rm(list = ls())
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
library(devtools)
library(roxygen2)
create("GENEMABR")
ls
setwd("./GENEMABR/")
document()
setwd("..")
install("GENEMABR")
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
install("GENEMABR")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
library(GENEMABR)
help("use_data")
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
knitr::opts_chunk$set(echo = TRUE)
## including some data in the package
## following link in https://bookdown.org/rdpeng/RProgDA/data-within-a-package.html
## first save it as raw data so users can get access to it
##then transfer to internal data so package can use it easily
human_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("extdata", "human_reactome_ontology.rds", package = "GENEMABR"))
## including some data in the package
## following link in https://bookdown.org/rdpeng/RProgDA/data-within-a-package.html
## first save it as raw data so users can get access to it
##then transfer to internal data so package can use it easily
human_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("data", "human_reactome_ontology.rds", package = "GENEMABR"))
gene_pathway_matrix=readRDS(system.file("data", "gene_pathway_matrix.rds", package = "GENEMABR"))
human_reactome_roots=readRDS(system.file("data", "human_reactome_roots.rds", package = "GENEMABR"))
help("use_data")
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots,pkg="GENEMABR")
human_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("data", "human_reactome_ontology.rds", package = "GENEMABR"))
gene_pathway_matrix=readRDS(system.file("data", "gene_pathway_matrix.rds", package = "GENEMABR"))
human_go_roots=readRDS(system.file("data", "human_go_roots.rds", package = "GENEMABR"))
human_go_sub_roots=readRDS(system.file("data", "human_go_sub_roots.rds", package = "GENEMABR"))
human_reactome_roots=readRDS(system.file("data", "human_reactome_roots.rds", package = "GENEMABR"))
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots,pkg="GENEMABR")
## including some data in the package
## following link in https://bookdown.org/rdpeng/RProgDA/data-within-a-package.html
## first save it as raw data so users can get access to it
##then transfer to internal data so package can use it easily
human_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("data", "human_reactome_ontology.rds", package = "GENEMABR"))
gene_pathway_matrix=readRDS(system.file("data", "gene_pathway_matrix.rds", package = "GENEMABR"))
human_go_roots=readRDS(system.file("data", "human_go_roots.rds", package = "GENEMABR"))
human_go_sub_roots=readRDS(system.file("data", "human_go_sub_roots.rds", package = "GENEMABR"))
human_reactome_roots=readRDS(system.file("data", "human_reactome_roots.rds", package = "GENEMABR"))
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots,pkg="GENEMABR")
use_data(human_go_ontology,pkg="GENEMABR")
use_data(human_go_roots,pkg="GENEMABR")
use_data("human_go_roots",pkg="GENEMABR")
use_data(human_go_ontology,pkg="GENEMABR")
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
use_data("human_go_roots",pkg="GENEMABR")
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
use_data("human_go_roots",pkg="GENEMABR")
help("regression_selected_pathways")
a=1
use_data(human_go_ontology,pkg="GENEMABR")
use_data(a,pkg="GENEMABR")
a=1
use_data(a,pkg="GENEMABR")
use_data(a)
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots)
# steps to procees documentation for the pacakge
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
# steps to procees documentation for the pacakge
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
# steps to procees documentation for the pacakge
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
# steps to procees documentation for the pacakge
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
# steps to procees documentation for the pacakge
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
library(GENEMABR)
help("get_steps")
help("human_go_ontology")
rm(list = ls())
library(GENEMABR)
help("human_go_ontology")
human_go_ontology
human_go_roots
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(roxygen2)
library(Matrix)
library(GENEMABR)
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
## including some data in the data/ folder
## following link in https://bookdown.org/rdpeng/RProgDA/data-within-a-package.html
human_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("data", "human_reactome_ontology.rds", package = "GENEMABR"))
gene_pathway_matrix=readRDS(system.file("data", "gene_pathway_matrix.rds", package = "GENEMABR"))
human_go_roots=readRDS(system.file("data", "human_go_roots.rds", package = "GENEMABR"))
human_go_sub_roots=readRDS(system.file("data", "human_go_sub_roots.rds", package = "GENEMABR"))
human_reactome_roots=readRDS(system.file("data", "human_reactome_roots.rds", package = "GENEMABR"))
### remember if we want to documenet data automaticaly by document() funcion. We have to store datasets as rda format inseatd of into data/foler
### we could use use data to do the transformation or we could save the rds data in /data folder direactly
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots)
uman_go_ontology=readRDS(system.file("data", "human_go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("data", "human_reactome_ontology.rds", package = "GENEMABR"))
gene_pathway_matrix=readRDS(system.file("data", "gene_pathway_matrix.rds", package = "GENEMABR"))
human_go_roots=readRDS(system.file("data", "human_go_roots.rds", package = "GENEMABR"))
human_go_sub_roots=readRDS(system.file("data", "human_go_sub_roots.rds", package = "GENEMABR"))
human_reactome_roots=readRDS(system.file("data", "human_reactome_roots.rds", package = "GENEMABR"))
### remember if we want to documenet data automaticaly by document() funcion. We have to store datasets as rda format inseatd of into data/foler
### we could use use data to do the transformation or we could save the rds data in /data folder direactly
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots)
### remember if we want to documenet data automaticaly by document() funcion. We have to store datasets as rda format inseatd of into data/foler
### we could use use data to do the transformation or we could save the rds data in /data folder direactly
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots)
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots)
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots,GENEMABR)
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
use_data(human_go_ontology,human_reactome_ontology,gene_pathway_matrix,human_go_roots,human_go_sub_roots,human_reactome_roots,GENEMABR)
getwd()
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
help("fisher.test")
library(stats)
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
library(RUnit)
library(testthat)
install.packages("testthat")
library(testthat)
devtools::use_testthat()
help("test_check")
knitr::opts_chunk$set(echo = TRUE)
#Gene module from the paper
gene_list=c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8")
#Here use regression_selected_pathways with default gene pathway matrix
#and set the alpha value as 0.5
enrichment_results=regression_selected_pathways(gene_input=gene_list,
gene_pathway_matrix="default",alpha=0.5)
regression_selected_pathways(gene_input = ""TRPC4AP","CDC37"")
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37"))
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37"),alpha = 0)
regression_selected_pathways(gene_input = c("TRPC4AP"),alpha = 0)
a=regression_selected_pathways(gene_input = c("TRPC4AP"),alpha = 0)
a=regression_selected_pathways(gene_input = c("TNIP1),alpha = 0)
""
"
a=regression_selected_pathways(gene_input = c("TNIP1"),alpha = 0)
a
a=regression_selected_pathways(gene_input = c("NFKB2"),alpha = 0)
a
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37"),alpha = 1)
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37"),alpha = 0.5)
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37"),alpha = 0.)
#Gene module from the paper
gene_list=c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8")
#Here use regression_selected_pathways with default gene pathway matrix
#and set the alpha value as 0.5
enrichment_results=regression_selected_pathways(gene_input=gene_list,
gene_pathway_matrix="default",alpha=0.5)
enrichment_results
enrichment_results
names(enrichment_results$selected_pathways_coef)
find_root_ids("R-HSA-1810476")
a=find_root_ids("R-HSA-1810476")
a=list()
a[[1]]="R-HSA-168256"
names(a)="R-HSA-1810476"
expect_equal(find_root_ids("R-HSA-1810476"), 1)
expect_equal(find_root_ids("R-HSA-1810476"), a)
expect_equal(find_root_ids("R-HSA-1810476"), a)
a=expect_equal(find_root_ids("R-HSA-1810476"), a)
a=list()
a[[1]]="R-HSA-168256"
names(a)="R-HSA-1810476"
b
b=find_root_ids("R-HSA-1810476")
names(enrichment_results$selected_pathways_coef)
find_root_ids("GO:0032688")
a=list()
a[[1]]="R-HSA-168256"
names(a)="R-HSA-1810476"
b=list()
b[[1]]="GO:0065007"
names(b)="GO:0032688"
expect_equal(find_root_ids("R-HSA-1810476"), a)
expect_equal(find_root_ids("GO:0032688"), a)
expect_equal(find_root_ids("GO:0032688"), b)
GO_Reactome_root_id
# If you use the default pathway databases(GO Ontologyand REACTOME).
# After you extracted enriched pathways, you can use find_root_ids function
#to find thier GO sub-root or REACTOME roots(ID) to help you better
#understanding the biological meanings of pathways.
#Here we use GO sub-root instead of GO root nodes as there are only
#three roots in the GO ontology and there are not so specific
GO_Reactome_root_id=find_root_ids(names(enrichment_results$selected_pathways_coef))
GO_Reactome_root_id
GO_Reactome_root_id
# Or if you want to obatain root notes names instead of ID, you can use function
# from_id2name to get names from ids
GO_Reactome_root_id_names=from_id2name(GO_Reactome_root_id)
GO_Reactome_root_id_names
a=list()
a[[1]]="R-HSA-168256"
names(a)="R-HSA-1810476"
b=list()
b[[1]]="GO:0009987#GO:0065007"
names(b)="GO:0007249"
test_a=list()
test_a[[1]]="Immune System"
names(test_a)="R-HSA-168256"
test_b=list()
test_b[[1]]=c("cellular process", "biological regulation")
test_names(test_b)="GO:0009987#GO:0065007"
a=list()
a[[1]]="R-HSA-168256"
names(a)="R-HSA-1810476"
b=list()
b[[1]]="GO:0009987#GO:0065007"
names(b)="GO:0007249"
test_a=list()
test_a[[1]]="Immune System"
names(test_a)="R-HSA-168256"
test_b=list()
test_b[[1]]=c("cellular process", "biological regulation")
names(test_b)="GO:0009987#GO:0065007"
expect_equal(find_root_ids(a, test_a)
expect_equal(find_root_ids("GO:0032688"), b)
})
expect_equal(find_root_ids(a, test_a)
expect_equal(find_root_ids("GO:0032688"), b)
})
expect_equal(find_root_ids(a), test_a)
expect_equal(find_root_ids(b), test_b)
find_root_ids(a)
expect_equal(find_id2name(a), test_a)
hlep
expect_equal(from_id2name(a), test_a)
expect_equal(from_id2name(b), test_b)
knitr::opts_chunk$set(echo = TRUE)
selected_pathways=c("GO:0005834","R-HSA-111469")
# Or you  can use function from_id2name to get names from ids
step2root=get_steps(selected_pathways=c("GO:0005834","R-HSA-111469"))
step2root
a=list(3,4)
names(a)=c("GO:0005834","R-HSA-111469")
expect_equal(from_id2name(c("GO:0005834","R-HSA-111469")), a)
expect_equal(get_steps(c("GO:0005834","R-HSA-111469")), a)
#Gene module from the paper
gene_list=c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8")
#Here use regression_selected_pathways with default gene pathway matrix
#and set the alpha value as 0.5
enrichment_results=regression_selected_pathways(gene_input=gene_list,
gene_pathway_matrix="default",alpha=0.5)
enrichment_results
selected_pathways_names=list("RIP-mediated NFkB activation via ZBP1","IkBA variant leads to EDA-ID",
"negative regulation of interferon-beta production","TRAF6 mediated NF-kB activation",
"I-kappaB kinase/NF-kappaB signaling","ZBP1(DAI) mediated induction of type I IFNs")
selected_pathways_names=list("RIP-mediated NFkB activation via ZBP1","IkBA variant leads to EDA-ID",
"negative regulation of interferon-beta production","TRAF6 mediated NF-kB activation",
"I-kappaB kinase/NF-kappaB signaling","ZBP1(DAI) mediated induction of type I IFNs")
names(selected_pathways_names)=c("selected_pathways_names$`R-HSA-1810476`","selected_pathways_names$`R-HSA-5603029`",
"selected_pathways_names$`GO:0032688`","selected_pathways_names$`R-HSA-933542`",
"selected_pathways_names$`GO:0007249`","selected_pathways_names$`R-HSA-1606322`")
selected_pathways_coef=c(0.12593491,0.07105989,0.01993546,0.01910265,0.00513055, 0.00219621 )
names(selected_pathways_coef)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
selected_pathways_fisher_pvalue=c(3.511133e-10,4.005332e-08,6.338554e-05,1.929685e-09,4.985802e-11,7.596824e-10)
names(selected_pathways_fisher_pvalue)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
selected_pathways_num_genes=c( 11,7,11,16 ,63,13)
names(selected_pathways_num_genes)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
a=list(selected_pathways_names=selected_pathways_names,selected_pathways_coef=selected_pathways_coef,
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue,selected_pathways_num_genes=selected_pathways_num_genes)
expect_equal(regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 0.5), a)
test_a=c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 0.5)
test_a=regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 0.5)
test_a
b=test_a
b
selected_pathways_names=list("RIP-mediated NFkB activation via ZBP1","IkBA variant leads to EDA-ID",
"negative regulation of interferon-beta production","TRAF6 mediated NF-kB activation",
"I-kappaB kinase/NF-kappaB signaling","ZBP1(DAI) mediated induction of type I IFNs")
names(selected_pathways_names)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
selected_pathways_coef=c(0.12593491,0.07105989,0.01993546,0.01910265,0.00513055, 0.00219621 )
names(selected_pathways_coef)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
selected_pathways_fisher_pvalue=c(3.511133e-10,4.005332e-08,6.338554e-05,1.929685e-09,4.985802e-11,7.596824e-10)
names(selected_pathways_fisher_pvalue)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
selected_pathways_num_genes=c( 11,7,11,16 ,63,13)
names(selected_pathways_num_genes)=c("R-HSA-1810476","R-HSA-5603029","GO:0032688","R-HSA-933542","GO:0007249","R-HSA-1606322")
a=list(selected_pathways_names=selected_pathways_names,selected_pathways_coef=selected_pathways_coef,
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue,selected_pathways_num_genes=selected_pathways_num_genes)
expect_equal(regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 0.5), a)
help("expect_equal")
expect_equal(regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 1), NULL)
gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 1)
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 1)
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 1)
regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 1)
c=regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1","IKBKB","NKIRAS2","NFKBIA","TIMM50","RELB",
"TNFAIP3","NFKBIB","HSPA1A","NFKBIE","SPAG9",
"NFKB2","ERLIN1","REL","TNIP2","TUBB6","MAP3K8"),alpha = 1)
c
c$selected_pathways_fisher_pvalue
c$selected_pathways_fisher_pvalue== 3.511133e-10
expect_equal(regression_selected_pathways(gene_input = c("TRPC4AP","CDC37","TNIP1"),alpha = 1), NULL)
devtools::test()
devtools::test()
test()
library(devtools)
test()
test()
test_check()
test_check("GENEMABR")
help(rm(list = ls()))
rm(list = ls())
library(devtools)
library(roxygen2)
library(Matrix)
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
library(GENEMABR)
devtools::test()
test_check()
test_check("GENEMABR")
test_check("GENEMABR")
devtools::test()
test_check()
test_check("GENEMABR")
test_file("./tests/testthat.R")
devtools::use_testthat()
usethis::use_testthat()
use_test()
devtools::test()
devtools::test()
devtools::test()
test()
test()
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
library(BiocCheck)
pathToPkg <- file.path("/Users/taofang/Documents/GeneModuleAnnotationPaper/github_package/","GENEMABR")
BiocCheck(pathToPkg)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(roxygen2)
library(Matrix)
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/GENEMABR/")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/github_package/")
install("GENEMABR")
tinytex::install_tinytex()
